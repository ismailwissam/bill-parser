!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
CC	Makefile	/^CC = gcc$/;"	m
CONF	collect.c	59;"	d	file:
DEFAULT_COMMIT_DIR	collect.c	63;"	d	file:
DEFAULT_RUN_DIR	collect.c	62;"	d	file:
ERR_LOG_FILE	collect.c	60;"	d	file:
FTP_TIME_OUT	collect.c	54;"	d	file:
Ftp_Cd	Ftp.h	/^int  Ftp_Cd(const char *directory);$/;"	p	signature:(const char *directory)
Ftp_Cdup	Ftp.h	/^int  Ftp_Cdup(void);$/;"	p	signature:(void)
Ftp_Close	Ftp.h	/^void Ftp_Close(void);$/;"	p	signature:(void)
Ftp_Delete	Ftp.h	/^int  Ftp_Delete(const char *file_name);$/;"	p	signature:(const char *file_name)
Ftp_Dir	Ftp.h	/^int  Ftp_Dir(const char *outfile_name);$/;"	p	signature:(const char *outfile_name)
Ftp_Init	Ftp.h	/^int  Ftp_Init(const char *user_name,const char *passwd,const $/;"	p	signature:(const char *user_name,const char *passwd,const char *ip,int port,unsigned int time_out, int yesno_binary,int yesno_passive,int yesno_debug)
Ftp_Mkdir	Ftp.h	/^int  Ftp_Mkdir(const char *dir_name);$/;"	p	signature:(const char *dir_name)
Ftp_Nlist	Ftp.h	/^int  Ftp_Nlist(const char *outfile_name);$/;"	p	signature:(const char *outfile_name)
Ftp_Pwd	Ftp.h	/^char *Ftp_Pwd(void);$/;"	p	signature:(void)
Ftp_Receive	Ftp.h	/^int  Ftp_Receive(const char *remote_name,const char *local_name,$/;"	p	signature:(const char *remote_name,const char *local_name, off_t rpoint,long *suc_bytes)
Ftp_Rename	Ftp.h	/^int  Ftp_Rename(const char *from_name,const char *to_name);$/;"	p	signature:(const char *from_name,const char *to_name)
Ftp_Rmdir	Ftp.h	/^int  Ftp_Rmdir(const char *dir_name);$/;"	p	signature:(const char *dir_name)
Ftp_Send	Ftp.h	/^int  Ftp_Send(const char *local_name,const char *remote_name,$/;"	p	signature:(const char *local_name,const char *remote_name, off_t rpoint,long *suc_bytes)
Ftp_Size	Ftp.h	/^int  Ftp_Size(const char *remote_name);$/;"	p	signature:(const char *remote_name)
LDFLAGS	Makefile	/^LDFLAGS = -L.\/$/;"	m
LIBS	Makefile	/^LIBS = -lz -lFtp -lresolv -lsocket -lnsl$/;"	m
LOG	collect.c	58;"	d	file:
MAX_BUFFER	collect.c	46;"	d	file:
MAX_CHILD_PROCESS	collect.c	55;"	d	file:
MAX_COMPANY	collect.c	49;"	d	file:
MAX_DATE	collect.c	48;"	d	file:
MAX_DEVICE	collect.c	50;"	d	file:
MAX_FILENAME	collect.c	44;"	d	file:
MAX_FTP_IP	collect.c	51;"	d	file:
MAX_FTP_PWD	collect.c	53;"	d	file:
MAX_FTP_USER	collect.c	52;"	d	file:
MAX_LONG_FILENAME	collect.c	45;"	d	file:
MAX_TIME	collect.c	47;"	d	file:
OBJECTS	Makefile	/^OBJECTS = $(SRCS:%.c=%.o)$/;"	m
PARSE_FAIL	collect.c	/^	PARSE_FAIL 	    = -1,$/;"	e	enum:parse_code	file:
PARSE_MATCH	collect.c	/^	PARSE_MATCH	    = 1 ,$/;"	e	enum:parse_code	file:
PARSE_UNMATCH	collect.c	/^	PARSE_UNMATCH	= 2 ,$/;"	e	enum:parse_code	file:
PREFIX_RUN_LOG_FILE	collect.c	61;"	d	file:
SLEEP_TIME	collect.c	56;"	d	file:
SRCS	Makefile	/^SRCS = $(wildcard .\/*.c) $/;"	m
TARGET	Makefile	/^TARGET = ..\/..\/..\/release\/collect\/collect$/;"	m
WORK	collect.c	57;"	d	file:
__Ftp_	Ftp.h	13;"	d
__anon1::pid	collect.c	/^	int pid;$/;"	m	struct:__anon1	file:	access:public
__anon1::sleep_time	collect.c	/^	int sleep_time;$/;"	m	struct:__anon1	file:	access:public
__anon2::backup_path	collect.c	/^	char  backup_path[MAX_FILENAME];$/;"	m	struct:__anon2	file:	access:public
__anon2::collect_point	collect.c	/^	int   collect_point;$/;"	m	struct:__anon2	file:	access:public
__anon2::company	collect.c	/^	char  company[MAX_COMPANY];$/;"	m	struct:__anon2	file:	access:public
__anon2::current_process_number	collect.c	/^	int   current_process_number;$/;"	m	struct:__anon2	file:	access:public
__anon2::device	collect.c	/^	char  device[MAX_DEVICE];$/;"	m	struct:__anon2	file:	access:public
__anon2::file_pre	collect.c	/^	char  file_pre[MAX_FILENAME];$/;"	m	struct:__anon2	file:	access:public
__anon2::file_str	collect.c	/^	char  file_str[MAX_FILENAME];$/;"	m	struct:__anon2	file:	access:public
__anon2::file_suf	collect.c	/^	char  file_suf[MAX_FILENAME];$/;"	m	struct:__anon2	file:	access:public
__anon2::ip	collect.c	/^	char  ip[MAX_FTP_IP];$/;"	m	struct:__anon2	file:	access:public
__anon2::is_backup	collect.c	/^	int   is_backup;$/;"	m	struct:__anon2	file:	access:public
__anon2::is_commit	collect.c	/^	int   is_commit;$/;"	m	struct:__anon2	file:	access:public
__anon2::is_interval_file	collect.c	/^	int   is_interval_file;$/;"	m	struct:__anon2	file:	access:public
__anon2::is_multi_path	collect.c	/^	int   is_multi_path;  $/;"	m	struct:__anon2	file:	access:public
__anon2::password	collect.c	/^	char  password[MAX_FTP_PWD];$/;"	m	struct:__anon2	file:	access:public
__anon2::path_last	collect.c	/^	char  path_last[MAX_FILENAME];$/;"	m	struct:__anon2	file:	access:public
__anon2::path_pre	collect.c	/^	char  path_pre[MAX_FILENAME];$/;"	m	struct:__anon2	file:	access:public
__anon2::path_str	collect.c	/^	char  path_str[MAX_FILENAME];$/;"	m	struct:__anon2	file:	access:public
__anon2::path_suf	collect.c	/^	char  path_suf[MAX_FILENAME];$/;"	m	struct:__anon2	file:	access:public
__anon2::path_up	collect.c	/^	char  path_up[MAX_FILENAME];$/;"	m	struct:__anon2	file:	access:public
__anon2::port	collect.c	/^	int   port; \/\/端口port:华为6621$/;"	m	struct:__anon2	file:	access:public
__anon2::usr	collect.c	/^	char  usr[MAX_FTP_USER];$/;"	m	struct:__anon2	file:	access:public
backup_file	collect.c	/^static int			backup_file(collect_conf * p_collect_conf, const char * remote_file_name, const char* lpTimeStamp);$/;"	p	file:	signature:(collect_conf * p_collect_conf, const char * remote_file_name, const char* lpTimeStamp)
backup_file	collect.c	/^static int backup_file(collect_conf * pCollectConf, const char * szRemoteFileName, const char* lpTimeStamp)$/;"	f	file:	signature:(collect_conf * pCollectConf, const char * szRemoteFileName, const char* lpTimeStamp)
backup_path	collect.c	/^	char  backup_path[MAX_FILENAME];$/;"	m	struct:__anon2	file:	access:public
collect_conf	collect.c	/^} collect_conf; $/;"	t	typeref:struct:__anon2	file:
collect_point	collect.c	/^	int   collect_point;$/;"	m	struct:__anon2	file:	access:public
commit_file	collect.c	/^static int			commit_file(collect_conf * p_collect_conf, const char * remote_file_name, const char* lpTimeStamp);$/;"	p	file:	signature:(collect_conf * p_collect_conf, const char * remote_file_name, const char* lpTimeStamp)
commit_file	collect.c	/^static int commit_file(collect_conf * p_collect_conf, const char * remote_file_name, const char* lpTimeStamp)$/;"	f	file:	signature:(collect_conf * p_collect_conf, const char * remote_file_name, const char* lpTimeStamp)
company	collect.c	/^	char  company[MAX_COMPANY];$/;"	m	struct:__anon2	file:	access:public
convert_date_hw	collect.c	/^static int		 	convert_date_hw(char* lpOutDateTime, const char* lpInTime, const char* lpInDate);$/;"	p	file:	signature:(char* lpOutDateTime, const char* lpInTime, const char* lpInDate)
convert_date_hw	collect.c	/^static int convert_date_hw(char* lpOutDateTime, const char* lpInTime, const char* lpInDate)$/;"	f	file:	signature:(char* lpOutDateTime, const char* lpInTime, const char* lpInDate)
convert_date_hw_sp6	collect.c	/^static int			convert_date_hw_sp6(char* lpOutDateTime, char* lpInTime, const char* lpInDate);$/;"	p	file:	signature:(char* lpOutDateTime, char* lpInTime, const char* lpInDate)
convert_date_hw_sp6	collect.c	/^static int convert_date_hw_sp6(char* lpOutDateTime, char* lpInTime, const char* lpInDate)$/;"	f	file:	signature:(char* lpOutDateTime, char* lpInTime, const char* lpInDate)
convert_date_nsn	collect.c	/^static int			convert_date_nsn(char* lpOutDateTime, const char* lpInTime, const char* lpInDate);$/;"	p	file:	signature:(char* lpOutDateTime, const char* lpInTime, const char* lpInDate)
convert_date_nsn	collect.c	/^static int convert_date_nsn(char* lpOutDateTime, const char* lpInTime, const char* lpInDate)$/;"	f	file:	signature:(char* lpOutDateTime, const char* lpInTime, const char* lpInDate)
current_process_number	collect.c	/^	int   current_process_number;$/;"	m	struct:__anon2	file:	access:public
daemon_start	collect.c	/^static void         daemon_start(void);$/;"	p	file:	signature:(void)
daemon_start	collect.c	/^static void daemon_start(void)$/;"	f	file:	signature:(void)
device	collect.c	/^	char  device[MAX_DEVICE];$/;"	m	struct:__anon2	file:	access:public
err_log	collect.c	/^static int          err_log(const char * format,...);$/;"	p	file:	signature:(const char * format,...)
err_log	collect.c	/^static int err_log(const char * format,...)$/;"	f	file:	signature:(const char * format,...)
file_pre	collect.c	/^	char  file_pre[MAX_FILENAME];$/;"	m	struct:__anon2	file:	access:public
file_str	collect.c	/^	char  file_str[MAX_FILENAME];$/;"	m	struct:__anon2	file:	access:public
file_suf	collect.c	/^	char  file_suf[MAX_FILENAME];$/;"	m	struct:__anon2	file:	access:public
g_nAdjustMinute	collect.c	/^int          g_nAdjustMinute            = 0;$/;"	v
g_nCurrentProcessNumber	collect.c	/^int          g_nCurrentProcessNumber    = 0;$/;"	v
g_nDebug	collect.c	/^int          g_nDebug                   = 0;	\/\/设为1开启调试模式$/;"	v
g_nParallelChildProcess	collect.c	/^int          g_nParallelChildProcess    = 1;$/;"	v
g_szCollectStartTime	collect.c	/^char         g_szCollectStartTime[MAX_TIME];$/;"	v
g_szFileCommitDir	collect.c	/^char *       g_szFileCommitDir          = NULL;$/;"	v
g_szProgName	collect.c	/^char *       g_szProgName               = NULL;$/;"	v
g_szRecollectRunDir	collect.c	/^char *       g_szRecollectRunDir        = NULL;$/;"	v
g_szRunDir	collect.c	/^char *       g_szRunDir                 = NULL;$/;"	v
g_term_flag	collect.c	/^int          g_term_flag                = 0;$/;"	v
gen_recollect_record	collect.c	/^static int          gen_recollect_record(collect_conf * p_collect_conf, $/;"	p	file:	signature:(collect_conf * p_collect_conf, const char * start_time, const char * end_time)
gen_recollect_record	collect.c	/^static int gen_recollect_record(collect_conf * p_collect_conf, $/;"	f	file:	signature:(collect_conf * p_collect_conf, const char * start_time, const char * end_time)
get_backup_name	collect.c	/^static int			get_backup_name(collect_conf * pCollectConf, const char * szRemoteFileName, const char* lpTimeStamp, char * szBackupName);$/;"	p	file:	signature:(collect_conf * pCollectConf, const char * szRemoteFileName, const char* lpTimeStamp, char * szBackupName)
get_backup_name	collect.c	/^static int get_backup_name(collect_conf * pCollectConf,const char * szRemoteFileName,const char* lpTimeStamp,char * szBackupName)$/;"	f	file:	signature:(collect_conf * pCollectConf,const char * szRemoteFileName,const char* lpTimeStamp,char * szBackupName)
get_collect_conf	collect.c	/^static parse_code_e get_collect_conf(int nCollectPointNo, int nCurrentProcessNumber, collect_conf * pCollectConf);$/;"	p	file:	signature:(int nCollectPointNo, int nCurrentProcessNumber, collect_conf * pCollectConf)
get_collect_conf	collect.c	/^static parse_code_e get_collect_conf(int nCollectPointNo,int nCurrentProcessNumber,collect_conf * pCollectConf)$/;"	f	file:	signature:(int nCollectPointNo,int nCurrentProcessNumber,collect_conf * pCollectConf)
get_collect_time	collect.c	/^static int          get_collect_time(char * ret_collect_time, int adjust_minute);$/;"	p	file:	signature:(char * ret_collect_time, int adjust_minute)
get_collect_time	collect.c	/^static int get_collect_time(char * ret_collect_time, int adjust_minute)$/;"	f	file:	signature:(char * ret_collect_time, int adjust_minute)
get_file	collect.c	/^static int			get_file(collect_conf * p_collect_conf, const char * remote_path, const char * remote_file_name, long * file_size);$/;"	p	file:	signature:(collect_conf * p_collect_conf, const char * remote_path, const char * remote_file_name, long * file_size)
get_file	collect.c	/^static int get_file(collect_conf * p_collect_conf, const char * remote_path, const char * remote_file_name, long * file_size)$/;"	f	file:	signature:(collect_conf * p_collect_conf, const char * remote_path, const char * remote_file_name, long * file_size)
get_orig_file_name	collect.c	/^static parse_code_e get_orig_file_name(const char * dir_name, const char * prefix, const char * suffix,char * ret_file_name)$/;"	f	file:	signature:(const char * dir_name, const char * prefix, const char * suffix,char * ret_file_name)
get_orig_file_name	collect.c	/^static parse_code_e get_orig_file_name(const char * dir_name, const char * prefix,const char * suffix, char * ret_file_name);$/;"	p	file:	signature:(const char * dir_name, const char * prefix,const char * suffix, char * ret_file_name)
get_time	collect.c	/^static int          get_time(char * ret_cur_time);$/;"	p	file:	signature:(char * ret_cur_time)
get_time	collect.c	/^static int get_time(char * ret_cur_time)$/;"	f	file:	signature:(char * ret_cur_time)
ip	collect.c	/^	char  ip[MAX_FTP_IP];$/;"	m	struct:__anon2	file:	access:public
is_backup	collect.c	/^	int   is_backup;$/;"	m	struct:__anon2	file:	access:public
is_commit	collect.c	/^	int   is_commit;$/;"	m	struct:__anon2	file:	access:public
is_interval_file	collect.c	/^	int   is_interval_file;$/;"	m	struct:__anon2	file:	access:public
is_multi_path	collect.c	/^	int   is_multi_path;  $/;"	m	struct:__anon2	file:	access:public
main	collect.c	/^int main(int argc,char * argv[])$/;"	f	signature:(int argc,char * argv[])
parse_code	collect.c	/^typedef enum parse_code $/;"	g	file:
parse_code_e	collect.c	/^} parse_code_e;$/;"	t	typeref:enum:parse_code	file:
password	collect.c	/^	char  password[MAX_FTP_PWD];$/;"	m	struct:__anon2	file:	access:public
path_last	collect.c	/^	char  path_last[MAX_FILENAME];$/;"	m	struct:__anon2	file:	access:public
path_pre	collect.c	/^	char  path_pre[MAX_FILENAME];$/;"	m	struct:__anon2	file:	access:public
path_str	collect.c	/^	char  path_str[MAX_FILENAME];$/;"	m	struct:__anon2	file:	access:public
path_suf	collect.c	/^	char  path_suf[MAX_FILENAME];$/;"	m	struct:__anon2	file:	access:public
path_up	collect.c	/^	char  path_up[MAX_FILENAME];$/;"	m	struct:__anon2	file:	access:public
pid	collect.c	/^	int pid;$/;"	m	struct:__anon1	file:	access:public
point_collect	collect.c	/^static int			point_collect(int nCollectPointNo, int nCurrentProcessNo);$/;"	p	file:	signature:(int nCollectPointNo, int nCurrentProcessNo)
point_collect	collect.c	/^static int point_collect(int nCollectPointNo,int nCurrentProcessNo)$/;"	f	file:	signature:(int nCollectPointNo,int nCurrentProcessNo)
port	collect.c	/^	int   port; \/\/端口port:华为6621$/;"	m	struct:__anon2	file:	access:public
pre_suf_check	collect.c	/^static parse_code_e pre_suf_check(const char * name, const char * prefix, const char * suffix)$/;"	f	file:	signature:(const char * name, const char * prefix, const char * suffix)
pre_suf_check	collect.c	/^static parse_code_e pre_suf_check(const char * name,const char * prefix, const char * suffix);$/;"	p	file:	signature:(const char * name,const char * prefix, const char * suffix)
process_collect	collect.c	/^static int          process_collect(int current_number, int parallel_number);$/;"	p	file:	signature:(int current_number, int parallel_number)
process_collect	collect.c	/^static int process_collect(int current_number,int parallel_number)$/;"	f	file:	signature:(int current_number,int parallel_number)
run_log	collect.c	/^static int			run_log(collect_conf * p_collect_conf, const char * remote_path, const char * remote_file_name, long file_size, const char* lpTimeStamp);$/;"	p	file:	signature:(collect_conf * p_collect_conf, const char * remote_path, const char * remote_file_name, long file_size, const char* lpTimeStamp)
run_log	collect.c	/^static int run_log(collect_conf * p_collect_conf, const char * remote_path, const char * remote_file_name, long file_size, const char* lpTimeStamp)$/;"	f	file:	signature:(collect_conf * p_collect_conf, const char * remote_path, const char * remote_file_name, long file_size, const char* lpTimeStamp)
sigint_handler	collect.c	/^static void         sigint_handler(int signum);$/;"	p	file:	signature:(int signum)
sigint_handler	collect.c	/^static void sigint_handler(int signum)$/;"	f	file:	signature:(int signum)
sleep_time	collect.c	/^	int sleep_time;$/;"	m	struct:__anon1	file:	access:public
t_child_process_status	collect.c	/^} t_child_process_status;$/;"	t	typeref:struct:__anon1	file:
usage	collect.c	/^static void         usage(int status);$/;"	p	file:	signature:(int status)
usage	collect.c	/^static void usage(int status)$/;"	f	file:	signature:(int status)
usr	collect.c	/^	char  usr[MAX_FTP_USER];$/;"	m	struct:__anon2	file:	access:public
verify_collect_conf	collect.c	/^static int          verify_collect_conf(int * ret_point_num);$/;"	p	file:	signature:(int * ret_point_num)
verify_collect_conf	collect.c	/^static int verify_collect_conf(int * ret_point_num)$/;"	f	file:	signature:(int * ret_point_num)
